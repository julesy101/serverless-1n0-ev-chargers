service: chargers

provider:
  name: aws
  runtime: nodejs8.10
  environment:
    DYNAMODB_TABLE_CHARGER: ${self:service}-${opt:stage, self:provider.stage}
    DYNAMODB_TABLE_CHARGER_STATS: ${self:service}-stats-${opt:stage, self:provider.stage}
    DYNAMODB_TABLE_CHARGER_GEO: ${self:service}-geo-${opt:stage, self:provider.stage}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE_CHARGER}"
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE_CHARGER_STATS}"
    - Effect: Allow
      Action:
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource: "arn:aws:dynamodb:${opt:region, self:provider.region}:*:table/${self:provider.environment.DYNAMODB_TABLE_CHARGER_GEO}"
functions:
  openMapUpdate:
    handler: tasks/openMapUpdate.checkLatest
    environment:
      COUNTRY: GB
      MAXRESULTS: 10000
      GEOHASHLENGTH: 7
    events:
      - schedule:
          name: timed-open-map-check
          description: a timed check against open maps db
          rate: rate(5 minutes)
          enabled: true
          input:
            stageParams:
              stage: dev
  addCharger:
    handler: handlers/add.addCharger
    events:
      - http:
          path: chargers/add
          method: put 
          integration: lambda
  deleteCharger:
    handler: handlers/delete.deleteCharger
    events:
      - http:
          path: chargers/delete
          method: delete
          integration: lambda
  modifyCharger:
    handler: handlers/update.updateCharger
    events:
      - http:
          path: chargers/update
          method: post
          integration: lambda
  getCharger:
    handler: handlers/fetch.fetchCharger
    events:
      - http:
          path: chargers/fetch/{id}
          method: get
          integration: lambda
          request:
            template:
              application/json: >
                { 
                  "id" : "$input.params('id')" 
                }
  geoSearchCharger:
    handler: handlers/geo.geoLookup
    events:
      - http:
          path: chargers/geo/{lat}/{lng}/{radius}
          method: get
          integration: lambda
          request:
            template:
              application/json: >
                { 
                  "lat" : "$input.params('lat')",
                  "lng" : "$input.params('lng')" ,
                  "radius" : "$input.params('radius')"  
                }
resources:
  Resources:
    ChargersTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
          -
            AttributeName: ocmId
            AttributeType: N
          -
            AttributeName: networkName
            AttributeType: S
          -
            AttributeName: town
            AttributeType: S
          -
            AttributeName: postcode
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        GlobalSecondaryIndexes: 
          - IndexName: OCMChargers
            KeySchema:
            - AttributeName: ocmId
              KeyType: HASH
            Projection:
              ProjectionType: ALL
            ProvisionedThroughput:
              ReadCapacityUnits: 10
              WriteCapacityUnits: 10
          - IndexName: NetworkNames
            KeySchema:
            - AttributeName: networkName
              KeyType: HASH
            Projection:
              ProjectionType: KEYS_ONLY
            ProvisionedThroughput:
              ReadCapacityUnits: 10
              WriteCapacityUnits: 10
          - IndexName: Towns
            KeySchema:
            - AttributeName: town
              KeyType: HASH
            Projection:
              ProjectionType: KEYS_ONLY
            ProvisionedThroughput:
              ReadCapacityUnits: 10
              WriteCapacityUnits: 10
          - IndexName: Postcodes
            KeySchema:
            - AttributeName: postcode
              KeyType: HASH
            Projection:
              ProjectionType: KEYS_ONLY
            ProvisionedThroughput:
              ReadCapacityUnits: 10
              WriteCapacityUnits: 10
        ProvisionedThroughput:
          ReadCapacityUnits: 10
          WriteCapacityUnits: 10
        TableName: ${self:provider.environment.DYNAMODB_TABLE_CHARGER}
    ChargersStatsTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: id
            AttributeType: S
        KeySchema:
          -
            AttributeName: id
            KeyType: HASH
        ProvisionedThroughput:
          ReadCapacityUnits: 1
          WriteCapacityUnits: 1
        TableName: ${self:provider.environment.DYNAMODB_TABLE_CHARGER_STATS}
    ChargersGeoTable:
      Type: 'AWS::DynamoDB::Table'
      DeletionPolicy: Retain
      Properties:
        AttributeDefinitions:
          -
            AttributeName: hashKey
            AttributeType: N
          -
            AttributeName: rangeKey
            AttributeType: S
          -
            AttributeName: geohash
            AttributeType: N
        KeySchema:
          -
            AttributeName: hashKey
            KeyType: HASH
          -
            AttributeName: rangeKey
            KeyType: RANGE
        LocalSecondaryIndexes:
          -
            IndexName: geohash-index
            KeySchema:
              -
                AttributeName: hashKey
                KeyType: HASH
              -
                AttributeName: geohash
                KeyType: RANGE
            Projection:
              ProjectionType: ALL
        ProvisionedThroughput:
          ReadCapacityUnits: 10
          WriteCapacityUnits: 5
        TableName: ${self:provider.environment.DYNAMODB_TABLE_CHARGER_GEO}

custom: 
  dynamodb:
    start:
      port: 8000
      inMemory: true
      migrate: true
    migration:
      dir: db/migrations
  documentation:
    info:
      version: "1"
      title: "1n0 Serverless Charging"
      description: "charger data aggregator service"
      termsOfService: "http://www.1and0.co.uk"
      contact:
        name: "One & Zero"
        url: "http://www.1and0.co.uk"
        email: "hello@1and0.co.uk"
      license:
        name: "Licensing"
        url: "http://www.1and0.co.uk/licensing"
    tags:
      -
        name: "EV Chargers"
        description: "Electric Vehicle Chargers"
    resources:
      -
        path: "chargers/add"
        description: "add charger to the service"
      -
        path: "chargers/update"
        description: "update a charger in the service"
      -
        path: "chargers/delete"
        description: "delete a charger from the service"
      -
        path: "chargers/fetch"
        description: "fetch a charger from the service"
plugins:
  - serverless-aws-documentation
  - serverless-offline-scheduler
  - serverless-dynamodb-local
  - serverless-offline